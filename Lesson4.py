'''1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.'''
from sys import argv

x, hours, salary, premium = argv
payment = float(hours) * float(salary) + float(premium)
print(f'  Зарплата составила {payment} рублей')

'''2. Представлен список чисел.
Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].'''
lst = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print([lst[i] for i in range(1, len(lst)) if lst[i] > lst[i-1]])

'''3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.'''
# 3.1 version
print(*(i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0), sep=', ')
# 3.2 version
# [print(i) for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]

'''4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания
обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]'''
print((lambda x: [i for i in x if x.count(i) == 1])([2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]))

'''5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные
числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().'''
spk = [i for i in range(100, 1001) if i % 2 == 0]
print(f"Результат вычисления произведения всех элементов списка, состоящего из четных числел от 100 до 1000:\n{spk}:\nРавен - {__import__('functools').reduce(lambda x, y: x*y, spk)}")

'''6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен
быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также
необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.'''
from itertools import count, cycle


def my_counter(x):
    for i in count(x):
        print(i)
        if i > x + 100:
            return


def my_cycle(y):
    k = 0
    for i in cycle(y):
        print(i)
        if i == y[-1] and k >= len(y) * 3:
            return
        k += 1


my_counter(int(input(f'Введите целое число ')))
my_cycle('I like Pythoning')

'''7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает
за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.'''
from math import factorial


def fact(n):
    for j in [i for i in range(n + 1)]:
        yield factorial(j)


for el in enumerate(fact(int(input(f'Введите целое положительное число ')))):
    print(f'факториал числа {el[0]} равен {el[1]}')
